import java.nio.file.Files

// Aggregate Javadocs
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:3.0.+'
    }
}

plugins {
    id "org.sonarqube" version "6.0.1.5171"
    id "com.gradleup.shadow" version "8.3.5" apply false
    id 'fabric-loom' version '1.9-SNAPSHOT' apply false
}

apply plugin: 'nebula-aggregate-javadocs'


allprojects {
    group = "com.djrapitops"
    version = "5.6-SNAPSHOT"

    ext {
        majorVersion = '5'
        minorVersion = '6'
        buildVersion = providers.provider {
            def command = "git rev-list --count HEAD"
            def buildInfo = command.execute().text.trim()
            // Magic number: git rev-list --count cdb13e3b663b18e3938ad5efc60d165fa9301f6e
            return Integer.parseInt(buildInfo.toString().replaceAll("[^0-9]", "")) - 3529
        }.get()

        fullVersion = majorVersion + '.' + minorVersion + ' build ' + buildVersion
        fullVersionFilename = majorVersion + '.' + minorVersion + '-build-' + buildVersion
        fullVersionSemantic = majorVersion + '.' + minorVersion + '+build.' + buildVersion
    }
}

logger.lifecycle("Building artifact for version $fullVersion / $fullVersionFilename / $fullVersionSemantic")

subprojects {
    // Build plugins
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "com.gradleup.shadow"

    // Report plugins
    apply plugin: "checkstyle"
    apply plugin: "jacoco"

    // Fix for UTF-8 files showing with wrong encoding when compiled on Windows machines.
    tasks {
        withType(JavaCompile).configureEach {
            options.release = 17
            options.encoding = "UTF-8"
        }

        withType(Javadoc).configureEach {
            options.encoding = "UTF-8"
        }
    }

    ext {
        daggerVersion = "2.55"

        palVersion = "5.2.0"

        bukkitVersion = "1.13.2-R0.1-SNAPSHOT"
        spigotVersion = "1.13.2-R0.1-SNAPSHOT"
        paperVersion = "1.13.2-R0.1-SNAPSHOT"
        spongeVersion = "8.1.0"
        nukkitVersion = "1.0-SNAPSHOT"
        bungeeVersion = "1.16-R0.4"
        velocityVersion = "3.0.0-SNAPSHOT"
        redisBungeeVersion = "0.3.8-SNAPSHOT"
        redisBungeeProxioDevVersion = "0.7.3"

        commonsTextVersion = "1.13.0"
        commonsCompressVersion = "1.27.1"
        commonsCodecVersion = "1.17.2"
        caffeineVersion = "3.1.8"
        jettyVersion = "11.0.24"
        caffeineVersion = "2.9.2"
        mysqlVersion = "9.1.0"
        mariadbVersion = "3.5.1"
        sqliteVersion = "3.48.0.0"
        adventureVersion = "4.18.0"
        hikariVersion = "6.2.1"
        slf4jVersion = "2.0.16"
        geoIpVersion = "4.2.1"
        gsonVersion = "2.11.0"
        dependencyDownloadVersion = "1.3.1"
        ipAddressMatcherVersion = "5.5.1"
        jasyptVersion = "1.9.3"

        bstatsVersion = "3.1.0"
        placeholderapiVersion = "2.11.5"
        nkPlaceholderapiVersion = "1.4-SNAPSHOT"

        junitVersion = "5.11.4"
        mockitoVersion = "5.15.2"
        seleniumVersion = "4.27.0"
        testContainersVersion = "1.20.4"
        swaggerVersion = "2.2.28"
    }

    repositories {
        mavenCentral()
        google()
        maven { url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/" } // Spigot
        maven { url = "https://repo.papermc.io/repository/maven-public/" } // Paper
        maven { url = "https://repo.spongepowered.org/repository/maven-public/" } // Sponge
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots" } // BungeeCord
        maven { url = "https://repo.playeranalytics.net/releases" } // Plan
        maven { url = "https://repo.md-5.net/content/repositories/snapshots/" } // RedisBungee
        maven { url = "https://jitpack.io" } // RedisBungee fork
    }

    dependencies {
        // Dependency Injection used across the project
        shadow "com.google.dagger:dagger:$daggerVersion"
        annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
        testImplementation "com.google.dagger:dagger:$daggerVersion"
        testAnnotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

        compileOnly "io.swagger.core.v3:swagger-core-jakarta:$swaggerVersion"

        // Test Tooling Dependencies
        testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"      // JUnit 5
        testImplementation "org.mockito:mockito-core:$mockitoVersion"           // Mockito Core
        testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"  // Mockito JUnit 5 Extension
        testImplementation "com.jayway.awaitility:awaitility:1.7.0"
        // Awaitility (Concurrent wait conditions)

        // Testing dependencies required by Plan
        testImplementation "org.xerial:sqlite-jdbc:$sqliteVersion" // SQLite
        testImplementation "com.mysql:mysql-connector-j:$mysqlVersion" // MySQL
        testImplementation "org.mariadb.jdbc:mariadb-java-client:$mariadbVersion" // MariaDB
    }

    configurations {
        // Include shadowed dependencies in compile classpath of dependent modules
        api.extendsFrom shadow

        testArtifacts.extendsFrom testRuntimeOnly // Test classes available to other modules
        testImplementation.extendsFrom shadow // Include shadowed dependencies in test classpath
    }
    // Test classes available to other modules
    tasks.register('testJar', Jar) {
        archiveClassifier.set("test")
        from sourceSets.test.output
    }
    artifacts {
        testArtifacts testJar
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "failed", "skipped"
            exceptionFormat "full"
        }
    }

    checkstyle {
        toolVersion "10.21.1"
        getConfigDirectory().set file("$rootProject.projectDir/config/checkstyle")
    }

    jacocoTestReport {
        reports {
            xml.required = true
            // xml.destination file("${buildDir}/jacoco/report.xml")
        }
    }

    plugins.withType(JacocoPlugin).configureEach {
        tasks.named("test").get().finalizedBy 'jacocoTestReport'
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "Player Analytics"
        property "sonar.projectKey", "com.djrapitops:Plan"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

tasks.register('snapshotVersion') {
    def versionsDir = layout.buildDirectory.dir("versions")
    def textFile = layout.buildDirectory.file("versions/snapshot.txt")
    doLast {
        versionsDir.get().asFile.mkdirs()
        def file = textFile.get().asFile
        file.delete()
        file.createNewFile()
        file << "$version"
    }
}

tasks.register('jarNameVersion') {
    def versionsDir = layout.buildDirectory.dir("versions")
    def textFile = layout.buildDirectory.file("versions/jar.txt")
    doLast {
        versionsDir.get().asFile.mkdirs()
        def file = textFile.get().asFile
        file.delete()
        file.createNewFile()
        file << "$majorVersion.$minorVersion-build-$buildVersion"
    }
}

tasks.register('humanReadableVersion') {
    def versionsDir = layout.buildDirectory.dir("versions")
    def textFile = layout.buildDirectory.file("versions/human.txt")
    doLast {
        versionsDir.get().asFile.mkdirs()
        def file = textFile.get().asFile
        file.delete()
        file.createNewFile()
        file << "$fullVersion"
    }
}
